// HTML-to-PDF approach - more reliable than jsPDF
export async function generatePDF(content: string, title: string): Promise<Uint8Array> {
  console.log('generatePDF called with title:', title);
  console.log('Content length:', content.length);
  
  try {
    // Create HTML document
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>${title}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 40px; 
              line-height: 1.6;
              color: #333;
            }
            h1 { 
              color: #2c3e50; 
              border-bottom: 2px solid #3498db; 
              padding-bottom: 10px;
            }
            h2 { 
              color: #34495e; 
              margin-top: 30px;
            }
            h3 { 
              color: #7f8c8d;
            }
            .field { 
              margin: 15px 0;
            }
            .field-label { 
              font-weight: bold; 
              color: #2c3e50;
            }
            .field-value { 
              margin-left: 20px;
            }
            .separator { 
              border-top: 1px solid #ecf0f1; 
              margin: 20px 0;
            }
            @media print {
              body { margin: 20px; }
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          <div class="separator"></div>
          ${processContentForHTML(content)}
          <div class="no-print" style="margin-top: 50px; text-align: center; color: #7f8c8d;">
            <p>Generated by UNA Platform</p>
            <p>Date: ${new Date().toLocaleDateString()}</p>
          </div>
        </body>
      </html>
    `;
    
    // Create blob and return
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const arrayBuffer = await blob.arrayBuffer();
    return new Uint8Array(arrayBuffer);
    
  } catch (error) {
    console.error('Error in generatePDF:', error);
    throw error;
  }
}

// Process content for HTML formatting
function processContentForHTML(content: string): string {
  const lines = content.split('\n');
  let htmlOutput = '';
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    if (!line) {
      htmlOutput += '<br>';
      continue;
    }
    
    // Handle different line types
    if (line.startsWith('# ')) {
      htmlOutput += `<h1>${line.substring(2)}</h1>`;
    } else if (line.startsWith('## ')) {
      htmlOutput += `<h2>${line.substring(3)}</h2>`;
    } else if (line.startsWith('### ')) {
      htmlOutput += `<h3>${line.substring(4)}</h3>`;
    } else if (line.startsWith('**') && line.endsWith('**')) {
      // Field labels
      const fieldText = line.substring(2, line.length - 2);
      htmlOutput += `<div class="field"><span class="field-label">${fieldText}</span></div>`;
    } else if (line.startsWith('â€¢ ') || line.startsWith('- ')) {
      // List items
      htmlOutput += `<li>${line.substring(2)}</li>`;
    } else if (line.startsWith('---')) {
      // Separators
      htmlOutput += '<div class="separator"></div>';
    } else {
      // Regular text
      htmlOutput += `<p>${line}</p>`;
    }
  }
  
  return htmlOutput;
}

// Simple test function using HTML approach
export async function generateSimpleTestPDF(): Promise<Uint8Array> {
  console.log('generateSimpleTestPDF called');
  
  try {
    const testContent = `
# Test PDF

This is a simple test PDF to verify generation works.

If you can see this, PDF generation is working!

## Test Section

- Point 1: Basic functionality
- Point 2: HTML rendering
- Point 3: PDF conversion ready
    `;
    
    return await generatePDF(testContent, 'Test PDF');
    
  } catch (error) {
    console.error('Error in generateSimpleTestPDF:', error);
    throw error;
  }
}

export async function generateUNAAgreementPDF(content: string): Promise<Uint8Array> {
  return generatePDF(content, 'UNA Agreement');
}

export async function generateEINGuidePDF(content: string): Promise<Uint8Array> {
  return generatePDF(content, 'EIN Application Guide');
}

export async function generateLPUNA128PDF(content: string): Promise<Uint8Array> {
  return generatePDF(content, 'LP UNA 128 Filing Package');
}
